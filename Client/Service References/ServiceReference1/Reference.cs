//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        // CODEGEN: Generating message contract since the wrapper name (RequestMessage) of message RequestMessage does not match the default value (downloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/downloadFile", ReplyAction="http://tempuri.org/IService1/downloadFileResponse")]
        Client.ServiceReference1.StreamMessage downloadFile(Client.ServiceReference1.RequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/downloadFile", ReplyAction="http://tempuri.org/IService1/downloadFileResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.StreamMessage> downloadFileAsync(Client.ServiceReference1.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation uploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/uploadFile", ReplyAction="http://tempuri.org/IService1/uploadFileResponse")]
        Client.ServiceReference1.uploadFileResponse uploadFile(Client.ServiceReference1.StreamMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/uploadFile", ReplyAction="http://tempuri.org/IService1/uploadFileResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.uploadFileResponse> uploadFileAsync(Client.ServiceReference1.StreamMessage request);
        
        // CODEGEN: Generating message contract since the operation getFiles is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFiles", ReplyAction="http://tempuri.org/IService1/getFilesResponse")]
        Client.ServiceReference1.AllFilesMessage getFiles(Client.ServiceReference1.getFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFiles", ReplyAction="http://tempuri.org/IService1/getFilesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.AllFilesMessage> getFilesAsync(Client.ServiceReference1.getFilesRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string name;
        
        public RequestMessage() {
        }
        
        public RequestMessage(string name) {
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StreamMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StreamMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string description;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream dataStream;
        
        public StreamMessage() {
        }
        
        public StreamMessage(string description, string fileName, System.IO.Stream dataStream) {
            this.description = description;
            this.fileName = fileName;
            this.dataStream = dataStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class uploadFileResponse {
        
        public uploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getFilesRequest {
        
        public getFilesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AllFilesMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AllFilesMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.Dictionary<string, string> data;
        
        public AllFilesMessage() {
        }
        
        public AllFilesMessage(System.Collections.Generic.Dictionary<string, string> data) {
            this.data = data;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ServiceReference1.StreamMessage Client.ServiceReference1.IService1.downloadFile(Client.ServiceReference1.RequestMessage request) {
            return base.Channel.downloadFile(request);
        }
        
        public string downloadFile(string name, out string fileName, out System.IO.Stream dataStream) {
            Client.ServiceReference1.RequestMessage inValue = new Client.ServiceReference1.RequestMessage();
            inValue.name = name;
            Client.ServiceReference1.StreamMessage retVal = ((Client.ServiceReference1.IService1)(this)).downloadFile(inValue);
            fileName = retVal.fileName;
            dataStream = retVal.dataStream;
            return retVal.description;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ServiceReference1.StreamMessage> Client.ServiceReference1.IService1.downloadFileAsync(Client.ServiceReference1.RequestMessage request) {
            return base.Channel.downloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.StreamMessage> downloadFileAsync(string name) {
            Client.ServiceReference1.RequestMessage inValue = new Client.ServiceReference1.RequestMessage();
            inValue.name = name;
            return ((Client.ServiceReference1.IService1)(this)).downloadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ServiceReference1.uploadFileResponse Client.ServiceReference1.IService1.uploadFile(Client.ServiceReference1.StreamMessage request) {
            return base.Channel.uploadFile(request);
        }
        
        public void uploadFile(string description, string fileName, System.IO.Stream dataStream) {
            Client.ServiceReference1.StreamMessage inValue = new Client.ServiceReference1.StreamMessage();
            inValue.description = description;
            inValue.fileName = fileName;
            inValue.dataStream = dataStream;
            Client.ServiceReference1.uploadFileResponse retVal = ((Client.ServiceReference1.IService1)(this)).uploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ServiceReference1.uploadFileResponse> Client.ServiceReference1.IService1.uploadFileAsync(Client.ServiceReference1.StreamMessage request) {
            return base.Channel.uploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.uploadFileResponse> uploadFileAsync(string description, string fileName, System.IO.Stream dataStream) {
            Client.ServiceReference1.StreamMessage inValue = new Client.ServiceReference1.StreamMessage();
            inValue.description = description;
            inValue.fileName = fileName;
            inValue.dataStream = dataStream;
            return ((Client.ServiceReference1.IService1)(this)).uploadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ServiceReference1.AllFilesMessage Client.ServiceReference1.IService1.getFiles(Client.ServiceReference1.getFilesRequest request) {
            return base.Channel.getFiles(request);
        }
        
        public System.Collections.Generic.Dictionary<string, string> getFiles() {
            Client.ServiceReference1.getFilesRequest inValue = new Client.ServiceReference1.getFilesRequest();
            Client.ServiceReference1.AllFilesMessage retVal = ((Client.ServiceReference1.IService1)(this)).getFiles(inValue);
            return retVal.data;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ServiceReference1.AllFilesMessage> Client.ServiceReference1.IService1.getFilesAsync(Client.ServiceReference1.getFilesRequest request) {
            return base.Channel.getFilesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.AllFilesMessage> getFilesAsync() {
            Client.ServiceReference1.getFilesRequest inValue = new Client.ServiceReference1.getFilesRequest();
            return ((Client.ServiceReference1.IService1)(this)).getFilesAsync(inValue);
        }
    }
}
